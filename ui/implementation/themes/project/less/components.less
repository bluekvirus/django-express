/**
 * Editors & Widgets/Plugins & Containers & UI Components 
 * in addition to those offered by Twitter Bootstrap.
 *
 * @author Tim Lauv
 * @updated 2014.07.24
 * @updated 2015.12.03
 * @updated 2015.12.07
 * @updated 2015.12.15
 * @updated 2016.03.11
 */

/**
 * =================================
 * Helpers
 * =================================
 */
.cursor {
    //---status---
    &-context-menu {
        cursor: context-menu;
    }
    &-help {
        cursor: help;
    }
    &-pointer, &-hand {
        cursor: pointer;
    }
    &-progress {
        cursor: progress;
    }
    &-wait {
        cursor: wait;
    }

    //---selection---
    &-cell, &-selectable {
        cursor: cell; //[+] means selectable
    }
    &-crosshair {
        cursor: crosshair;
    }
    &-text {
        cursor: text;
    }
    &-vertical-text, &-v-text {
        cursor: vertical-text;
    }

    //---dnd---
    &-alias, &-shortcut {
        cursor: alias;
    }
    &-copy {
        cursor: copy;
    }
    &-move {
        cursor: move;
    }
    &-no-drop {
        cursor: no-drop;
    }
    &-not-allowed {
        cursor: not-allowed;
    }

    //---scroll-resize---
    &-all-scroll, &-pan {
        cursor: all-scroll;
    }
    &-col-resize, &-h-resize {
        cursor: col-resize;
    }
    &-row-resize, &-v-resize {
        cursor: row-resize;
    }
    &-n-resize {
        cursor: n-resize;
    }
    &-e-resize {
        cursor: e-resize;
    }
    &-s-resize {
        cursor: s-resize;
    }
    &-w-resize {
        cursor: w-resize;
    }
    &-ne-resize {
        cursor: ne-resize;
    }
    &-nw-resize {
        cursor: nw-resize;
    }
    &-se-resize {
        cursor: se-resize;
    }
    &-sw-resize {
        cursor: sw-resize;
    }
    &-ew-resize {
        cursor: ew-resize;
    }
    &-ns-resize {
        cursor: ns-resize;
    }
    &-nesw-resize {
        cursor: nesw-resize;
    }
    &-nwes-resize {
        cursor: nwes-resize;
    }

    //---zoom---
    &-zoom-in {
        cursor: zoom-in;
    }
    &-zoom-out {
        cursor: zoom-out;
    }

    //---grab---
    &-grab {
        cursor: grab;
    }
    &-grabbing {
        cursor: grabbing;
    }
}


/**
 * =================================
 * Containers & Outline/Position Aid
 * =================================
 */

//Grid (1em gap on sides too)--------
.container-fluid {
    padding-left: @grid-gutter-width;
    padding-right: @grid-gutter-width;

    .row-expanded {
        margin-left: -@grid-gutter-width;
        margin-right: -@grid-gutter-width;
    }
}

// Wrapper --------------------------
.wrapper {
    padding-top: @grid-gutter-width / 2;
    padding-bottom: @grid-gutter-width / 2;

    &.first {
        padding-top: @grid-gutter-width;
    }
    &.last {
        padding-bottom: @grid-gutter-width;
    }
}

.wrapper-2x {
    padding-top: @grid-gutter-width;
    padding-bottom: @grid-gutter-width;

    &.first {
        padding-top: @grid-gutter-width * 2;
    }
    &.last {
        padding-bottom: @grid-gutter-width * 2;
    }
}

.wrapper-horizontal {
    padding-left: @grid-gutter-width / 2;
    padding-right: @grid-gutter-width / 2;
}

.wrapper-horizontal-2x {
    padding-left: @grid-gutter-width;
    padding-right: @grid-gutter-width;
}

.wrapper-full {
    padding: @grid-gutter-width / 2 @grid-gutter-width / 2;

    &.first {
        padding-top: @grid-gutter-width;
    }
    &.last {
        padding-bottom: @grid-gutter-width;
    }
}

.wrapper-full-2x {
    padding: @grid-gutter-width @grid-gutter-width;

    &.first {
        padding-top: @grid-gutter-width * 2;
    }
    &.last {
        padding-bottom: @grid-gutter-width * 2;
    }
}

// Bordered -------------------------
.border {
    border-style: solid;
    border-width: 0;
    border-color: @border-color-base;

    &-top {
        border-top-width: 1px;
        &-lg {
            border-top-width: 4px;
        }
    }
    &-left {
        border-left-width: 1px;
        &-lg {
            border-left-width: 4px;
        }
    }
    &-right {
        border-right-width: 1px;
        &-lg {
            border-right-width: 4px;
        }
    }
    &-bottom {
        border-bottom-width: 1px;
        &-lg {
            border-bottom-width: 4px;
        }
    }
    &-full {
        border-width: 1px;
        &-lg {
            border-width: 4px;
        }
    }
}

// Rounded -----------------------
.rounded {
    border-radius: 15px;

    &-xs {
        border-radius: 3px;
    }
    &-sm {
        border-radius: 6px;
    }
    &-lg {
        border-radius: 25px;
    }
    &-upper {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }
    &-lower {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }
    &-left {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
    &-right {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
}

// Pointer (Triangle) -- needs absolute (or float, less likely) to work
//(use font-size for size, border-color for backgroud)
//(use top, left to position it inside a .pointer-ct)
.pointer-ct, .relative-ct {
    position: relative;
}
.pointer {
    position: absolute; //always honor width/height
    width: 0; 
    height: 0;
    border: 0.5em solid @border-color-base;
    top: 50%;
    left: 50%;

    &-up {
        border-top: 0;
        border-left-color: transparent !important; //so we can just set border-color to change any type of pointer.
        border-right-color: transparent !important;
    }

    &-down {
        border-bottom: 0;
        border-left-color: transparent !important;
        border-right-color: transparent !important;
    }

    &-right {
        border-right: 0;
        border-top-color: transparent !important;
        border-bottom-color: transparent !important;
    }

    &-left {
        border-left: 0;
        border-top-color: transparent !important;
        border-bottom-color: transparent !important;
    }
}

// Circle --------------------------
//mixin
.circle(@size: 2.4em) {
    display: inline-block;
    border-radius: 50%;
    text-align: center;
    line-height: @size;
    padding: 0;
    .square(@size);

    //Note: use font-size later in element to resize as a group;
    //Note: if you have more than 3 chars as content, increase @size
}

// Heading ----------------------
.heading {
    padding-left: 1.5em;
    padding-right: 1.5em;
    padding-bottom: 0.75em;
    border-bottom: 1px solid @border-color-base;
}

// Box --------------------------
.box {
    background-color: @panel-bg;
    .heading, .header {
        .clearfix;
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        .h1,
        .h2,
        .h3,
        .h4,
        .h5,
        .h6 {
            margin: 0;
            display: inline-block !important;
            font-weight: 700;
        }
        .tools {
            //add .pull-right in class="" if want to float right in heading 
            //!BUG! -- (currently Chrome has a float bug that breaks floaded items into the next line...)
            display: inline-block !important;
            .dropdown-menu {
                left: auto;
                right: 0;
                top: auto;
            }
        }
        padding: @grid-gutter-width;
    }
    .body {
        padding: @grid-gutter-width;
    }
    margin-top: @grid-gutter-width / 2;
    margin-bottom: @grid-gutter-width / 2;
}

// Fieldset ---------------------
.fieldset {
    margin-top: 1.5em;
    .border;
    border-width: 1px;
    padding: @grid-gutter-width;
    background-color: @panel-bg;
    legend,
    .legend {
        font-size: @font-size-base;
        border: none;
        width: auto;
        margin: 0;
    }

    &-shadowed {
        position: relative;
        box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);
        border-width: 0;
        padding-top: @grid-gutter-width * 3;
        legend,
        .legend {
            width: 100%;
            position: absolute;
            top: 0;
            left: 0;
            padding: 0.5em 1em;
            border-bottom: 1px solid @border-color-base;
            background-color: @btn-default-bg;
            color: @btn-default-color;
        }
    }
}

// Segmented tab-like controls ------
.segmented-control {
    position: relative;
    display: table;
    overflow: hidden;
    font-size: @font-size-base * 0.8;
    font-weight: 400;
    background-color: @body-bg;
    color: @border-color-base;
    border: 1px solid @border-color-base;
    border-radius: @border-radius-base;
    margin: 1em auto;
    .control-item {
        display: table-cell;
        width: 1%;
        padding-top: 0.5em;
        padding-bottom: 0.6em;
        overflow: hidden;
        line-height: 1;
        text-align: center;
        text-overflow: ellipsis;
        white-space: nowrap;
        border-left: 1px solid; //inherits 'color' attr
        color: inherit;
        cursor: pointer;
        &:first-child {
            border-left-width: 0;
        }
        &:hover,
        &.hover {
            background-color: lighten(@border-color-base, 18%);
        }
        &:active,
        &.active {
            color: @body-bg;
            background-color: @border-color-base;
        }
    }
    //5 major coloring types
    .segmented-control(@type) {
        @color: 'brand-@{type}';
        &-@{type} {
            color: @@color;
            border-color: @@color;
            .control-item {
                &:hover,
                &.hover {
                    background-color: lighten(@@color, 35%);
                }
                &:active,
                &.active {
                    background-color: @@color;
                }
            }
        }
    }
    .segmented-control(primary);
    .segmented-control(success);
    .segmented-control(info);
    .segmented-control(warning);
    .segmented-control(danger);
}

// Callouts (suggestion: use h4 as headings, @credit: https://github.com/dotnetchris)
.callout(@color, @bgcolor: lighten(@color, 35%)) {
    display: block;
    margin: 20px 0;
    padding: 15px 30px 15px 15px;
    border-left: 5px solid @color;
    background-color: @bgcolor;
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        margin-top: 0;
        color: @color;
    }
    p:last-child {
        margin-bottom: 0;
    }
    code,
    .highlight {
        background-color: #fff;
    }
}

.callout-primary {
    .callout(@brand-primary, lighten(@brand-primary, 45%));
}

.callout-danger {
    .callout(@brand-danger, lighten(@brand-danger, 30%));
}

.callout-warning {
    .callout(@brand-warning, lighten(@brand-warning, 30%));
}

.callout-info {
    .callout(@brand-info, lighten(@brand-info, 30%));
}

.callout-success {
    .callout(@brand-success, lighten(@brand-success, 30%));
}


/**
 * =================================================
 * Editors
 * =================================================
 */

.has-error {
    label,
    .checkbox,
    .radio,
    .radio-inline,
    .checkbox-inline {
        color: @brand-danger;
    }
}


/**
 * =================================================
 * Widgets/Plugins
 * =================================================
 */

// Tree
.tree {
    list-style: none;
    .node {
        list-style: none;
        .type-indicator {
            .glyphicon;
            .glyphicon-plus;
        }
        &.expanded {
            & > .item .type-indicator {
                .glyphicon;
                .glyphicon-minus;
            }
        }
    }
    .leaf {
        list-style: none;
        .type-indicator {
            .hidden
        }
    }
}

// MD
.md-content {
    h1,
    h2,
    h3,
    h4,
    .h1,
    .h2,
    .h3,
    .h4 {
        margin: @font-size-h1 0 @font-size-h6;
    }
    h1,
    h2,
    h3,
    .h1,
    .h2,
    .h3 {
        border-bottom: 1px solid @hr-border;
        line-height: 1.4;
        padding-bottom: @font-size-h6/2;
    }
    h4,
    h5,
    h6,
    .h4,
    .h5,
    .h6 {
        color: @gray;
        font-weight: 600;
    }
    h5,
    h6,
    .h5,
    .h6 {
        margin: @font-size-h4 0 @font-size-h6;
        text-decoration: underline;
    }
    blockquote {
        font-size: @blockquote-font-size * 0.75;
        ul {
            .list-unstyled;
        }
        li > ul {
            padding-left: @grid-gutter-width * 2.15;
        }
    }
    pre {
        padding: 4px;
    }
    hr {
        border-style: dashed;
    }
}

.md-toc {
    .md-content;
    ul {
        .list-unstyled;
    }
    .chapter {
        //h2
        a {
            color: @gray-darker;
        }
        ul {
            padding-left: @grid-gutter-width * 2.15;
        }
        .section {
            a {
                color: @gray;
            }
            ul {
                a {
                    color: @gray-light;
                }
            }
        }
    }
}

// Split
.split-hbar {
    background: @gray-dark;
    height: 3px;
}

.split-vbar {
    background: @gray-dark;
    width: 3px;
}

// Notification
.amaran {
    border-radius: @border-radius-base;
    width: @notification-width-base;
    min-width: 200px;

    &.awesome {
        box-shadow: none;
        min-width: 300px;
        width: @notification-width-base;
        padding-right: @grid-gutter-width;
    }
    &.stagejs {
        background: none;
    }
}

// Popover
.popover{
  max-width: auto;
}


/**
 * ===============================================
 * UI Components
 * ===============================================
 */

//Action tags
[action] {
    cursor: pointer;
    &:hover,
    &.hover {
        i {
            text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.5);
        }
    }
}

//Margins Reset -----------------
.breadcrumb,
.alert {
    margin: 0;
}

//Button White ------------------
.btn-white {
    background: none;
    border: 1px solid @gray-lighter;
    &:hover,
    &:focus,
    &:active {
        color: @text-color;
        border: 1px solid darken(@gray-lighter, 20%);
    }
}

//Button Outlined ---------------
.btn-outline {
    background-color: transparent;
    transition: all 0.5s ease 0s;
    &.btn-link {
        color: @link-color;
    }
    &.btn-default {
        color: darken(@btn-default-bg, 20%);
    }
    &.btn-primary {
        color: @btn-primary-bg;
    }
    &.btn-info {
        color: @btn-info-bg;
    }
    &.btn-warning {
        color: @btn-warning-bg;
    }
    &.btn-success {
        color: @btn-success-bg;
    }
    &.btn-danger {
        color: @btn-danger-bg;
    }
    &:hover {
        color: lighten(@btn-default-color, 60%);
    }
}

//Button Circle -------------------------
//.circle applied to (icon-font) .btn
.btn.circle {
    .circle();
    box-shadow: 1px 1px 1px rgba(127, 127, 127, 0.5);
}

//Button Pointy -------------------------
//@credit https://github.com/shpoont/bootstrap-arrow-buttons
@pointy-button-font-size: @font-size-base;
@pointy-button-padding-tb: ceil(@pointy-button-font-size * 0.5);
@pointy-button-height: ceil(@pointy-button-padding-tb * 2 + @pointy-button-font-size * @line-height-base);
@pointy-button-corner-square-size: ceil(@pointy-button-height / sqrt(2)); //use ceil to smooth
@pointy-button-ba-delta: 5px; //::before/::after vertical offset delta compensation
@pointy-button-aliasing-factor: 1; //not used in normal sized pointy button

.btn-pointy-right,
.btn-pointy-left {
    position: relative;
    padding: @pointy-button-padding-tb @pointy-button-height / 2;
    border: 0;
    margin-left: @pointy-button-font-size * 0.2;
}
.btn-pointy-right {
    padding-left: @pointy-button-height; 
}
.btn-pointy-left {
    padding-right: @pointy-button-height;
}
.btn-pointy-right:before,
.btn-pointy-right:after,
.btn-pointy-left:before,
.btn-pointy-left:after { /* make two squares (before and after), looking similar to the button */
    content:" ";
    position: absolute; //so the width/height takes effect.
    top: @pointy-button-ba-delta * @pointy-button-aliasing-factor; /* move it down because of rounded corners */ 
    width: @pointy-button-corner-square-size; /* same as height */
    height: @pointy-button-corner-square-size; /* button_inner_height / sqrt(2) */
    background: inherit; /* use parent background */
    border: inherit; /* use parent border */
    border-left-color: transparent; /* hide left border */
    border-bottom-color: transparent; /* hide bottom border */
    border-radius: 0px @border-radius-base 0px 0px; /* round arrow corner, the shorthand property doesn't accept "inherit" so it is set to 4px */
}
.btn-pointy-right:before,
.btn-pointy-right:after {
    transform: rotate(45deg); /* rotate right arrow squares 45 deg to point right */
}
.btn-pointy-left:before,
.btn-pointy-left:after {
    transform: rotate(225deg); /* rotate left arrow squares 225 deg to point left */
}
.btn-pointy-right:before,
.btn-pointy-left:before { /* align the "before" square to the left */
    left: (@pointy-button-ba-delta - @pointy-button-height / 2) * @pointy-button-aliasing-factor; 
}
.btn-pointy-right:after,
.btn-pointy-left:after { /* align the "after" square to the right */
    right: (@pointy-button-ba-delta - @pointy-button-height / 2) * @pointy-button-aliasing-factor;
}
.btn-pointy-right:after,
.btn-pointy-left:before { /* bring arrow pointers to front */
    z-index: 1;
    border-top-left-radius: 2px;
    border-bottom-right-radius: 2px;
}
.btn-pointy-right:before,
.btn-pointy-left:after { /* hide arrow tails background */
    background-color: white;
}

//Label -------------------------
.label {
    border-radius: @border-radius-base; //reset
}

// Checkboxes (borrowed - @flatlogic)
// https://github.com/flatlogic/awesome-bootstrap-checkbox
// --------------------------------------------------
@check-icon-family: "Glyphicons Halflings";
@check-icon: "\e013";

.checkbox-variant(@parent, @color) {
  .@{parent} input[type="checkbox"]:checked + label,
  .@{parent} input[type="radio"]:checked + label {
    &::before {
      background-color: @color;
      border-color: @color;
    }
    &::after {
      color: #fff;
    }
  }
}

.checkbox{
  padding-left: 20px;

  label{
    display: inline-block;
    vertical-align: middle;
    position: relative;
    padding-left: 5px;

    &::before{
      content: "";
      display: inline-block;
      position: absolute;
      width: 17px;
      height: 17px;
      left: 0;
      margin-left: -20px;
      border: 1px solid @input-border;
      border-radius: 3px;
      background-color: #fff;
      .transition(~"border 0.15s ease-in-out, color 0.15s ease-in-out");
    }

    &::after{
      display: inline-block;
      position: absolute;
      width: 16px;
      height: 16px;
      left: 0;
      top: 0;
      margin-left: -20px;
      padding-left: 3px;
      padding-top: 1px;
      font-size: 11px;
      color: @input-color;
    }
  }

  input[type="checkbox"],
  input[type="radio"]{
    opacity: 0;
    z-index: 1;

    &:focus + label::before{
      .tab-focus();
    }

    &:checked + label::after{
      font-family: @check-icon-family;
      content: @check-icon;
    }

    &:disabled + label{
      opacity: 0.65;

      &::before{
        background-color: @input-bg-disabled;
        cursor: not-allowed;
      }
    }

  }

  &.checkbox-circle label::before{
    border-radius: 50%;
  }

  &.checkbox-inline{
    margin-top: 0;
  }
}

.checkbox-variant(checkbox-primary, @brand-primary);
.checkbox-variant(checkbox-danger, @brand-danger);
.checkbox-variant(checkbox-info, @brand-info);
.checkbox-variant(checkbox-warning, @brand-warning);
.checkbox-variant(checkbox-success, @brand-success);

// Radios (borrowed - @flatlogic)
// https://github.com/flatlogic/awesome-bootstrap-checkbox
// --------------------------------------------------

.radio-variant(@parent, @color) {
  .@{parent} input[type="radio"]{
    & + label{
      &::after{
        background-color: @color;
      }
    }
    &:checked + label{
      &::before {
        border-color: @color;
      }
      &::after{
        background-color: @color;
      }
    }
  }
}

.radio{
  padding-left: 20px;

  label{
    display: inline-block;
    vertical-align: middle;
    position: relative;
    padding-left: 5px;

    &::before{
      content: "";
      display: inline-block;
      position: absolute;
      width: 17px;
      height: 17px;
      left: 0;
      margin-left: -20px;
      border: 1px solid @input-border;
      border-radius: 50%;
      background-color: #fff;
      .transition(border 0.15s ease-in-out);
    }

    &::after{
      display: inline-block;
      position: absolute;
      content: " ";
      width: 11px;
      height: 11px;
      left: 3px;
      top: 3px;
      margin-left: -20px;
      border-radius: 50%;
      background-color: @input-color;
      .scale(0, 0);

      .transition-transform(.1s cubic-bezier(.8,-0.33,.2,1.33));
      //curve - http://cubic-bezier.com/#.8,-0.33,.2,1.33
    }
  }

  input[type="radio"]{
    opacity: 0;
    z-index: 1;

    &:focus + label::before{
      .tab-focus();
    }

    &:checked + label::after{
      .scale(1, 1);
    }

    &:disabled + label{
      opacity: 0.65;

      &::before{
        cursor: not-allowed;
      }
    }

  }

  &.radio-inline{
    margin-top: 0;
  }
}

.radio-variant(radio-primary, @brand-primary);
.radio-variant(radio-danger, @brand-danger);
.radio-variant(radio-info, @brand-info);
.radio-variant(radio-warning, @brand-warning);
.radio-variant(radio-success, @brand-success);

input[type="checkbox"],
input[type="radio"] {
  &.styled:checked + label:after {
    font-family: @check-icon-family;
    content: @check-icon;
  }
  &.styled:checked + label {
    &::before {
      color: #fff;
    }
    &::after {
      color: #fff;
    }
  }
}
